// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Tweet {
  id             String   @id @default(uuid())
  userId         String
  content        String   @db.Text
  createdAt      DateTime @default(now())
  multimedia     String?  @db.Text
  multimediaType String?  @default("image")

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes Like[]

  @@unique([createdAt, id])
  @@index([userId])
}

model Like {
  userId  String
  tweetId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@id([userId, tweetId])
  @@index([userId])
  @@index([tweetId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  tagName         String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  password        String?   @db.Text
  accounts        Account[]
  sessions        Session[]
  verified        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  backgroundImage String?   @db.Text

  tweets    Tweet[]
  likes     Like[]
  followers User[]  @relation(name: "Followers")
  follows   User[]  @relation(name: "Followers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
